{"/development/csharp/awesome-list/":{"data":{"":"","community-toolkits#Community Toolkits":" Community Toolkits for .NET Documentation Windows Community Toolkit Windows Community Toolkit Labs MVVM Samples MVVM WinUI Example + YouTube ","packages#Packages":" Humanizer Spectre Console ScottPlot Sep CsvHelper Serilog Mapsui Caliburn.Micro ","winui-3#WinUI 3":" WinUI 3 Gallery WinUI Extensions "},"title":"Awesome List"},"/development/csharp/using-a-sqlite-database/":{"data":{"":"","docs#Docs":" Use a SQLite database in a Windows app Reverse Engineering Using EF Core Power Tools Microsoft.Data.Sqlite Connection strings Keyless Entity Types ","extensions#Extensions":"Install the following for GUI based assistance with reverse engineering of an existing database and visualizing DbContext models.\nEF Core Power Tools EF Core Power Pack Remember to add database file extensions (e.g. .db, .sqlite, .kismet) and efpt.config.json to the .gitignore file."},"title":"Using a Sqlite Database"},"/development/javascript/":{"data":{"":"For the latest updates, check out my dedicated Github star list for JavaScript.","awesome-lists#Awesome Lists":" sorrycc’s Awesome JavaScript VueJS’s Awesome Vue.js ","cheatsheets#Cheatsheets":" ES6 Cheatsheet ","dev-packages#Dev Packages":" prettier prettier-eslint ","site-packages#Site Packages":" underscore.js Lodash axios HumanizeDuration.js Split.js mitt immutable.js LogTape Loglevel spin.js progressbar.js Glide.js ","vs-code-extensions#VS Code Extensions":" Prettier Prettier ESLint ESLint es6-string-html "},"title":"JavaScript"},"/development/react/":{"data":{"":"","awesome-lists#Awesome Lists":" shad/cn ui shad/cn ui components "},"title":"React"},"/development/react/awesome-list/":{"data":{"":"","shadcnui#shadcn/ui":" shadcn/ui docs ","shadcnui-extensions#shadcn/ui extensions":" shadcn extension tree kanban-style drag’n’drop "},"title":"Awesome List"},"/development/react/development-stack/":{"data":{"":"","initial-project-creation#Initial Project Creation":" Next.js installation shadcn/ui installation shadcn/ui dark mode setup with Next.js "},"title":"Development Stack"},"/electronics/gps/sub-microsecond-time-synchronization-using-pps/":{"data":{"":"","atgm336h-gps-breakout-module#ATGM336H GPS Breakout Module":"Component List\rATGM336H GPS Breakout Module Amazon Waveshare Industrial USB Dongle to TTL (FT232RNL) Amazon - Waveshare Wiki USB extension cable (optional, but recommended for stress relief and to improve GPS antenna placement if using a short antenna) Wiring Diagram\rPictures coming soon\nMake sure you change the voltage switch to 5V configuration, 3V3 doesn’t seem to supply enough current to power the module - even though it’s listed as using up to 3.6V. There is a capacitor to regular power, so providing 5V won’t damage the module.\nATGM336H Waveshare Dongle RX TX TX RX GND GND VCC VCC PPS DCD ","chrony-commands#Chrony Commands":"chronyc sources - Display sources, offsets, and which source may be selected for synchronization. (#* PPS should be displayed when PPS is working)\nAdd -v to get column definitions chronyc sourcestats - Display additional offsets to the basic sources command.\nAdd -v to get column definitions chronyc tracking - Display system time, detailed offsets and sync status.","chrony-configuration#Chrony Configuration":"Edit the file /etc/chrony/chrony.conf:\nComment out any default pool or server lines, or append the noselect option to keep the NTP sources for comparison, but not synchronization.\nAdd the lines below to use shared memory to receive NMEA sentences from gpsd:\nrefclock SHM 0 offset 0.5 delay 0.2 refid NMEA noselect refclock SHM 1 refid PPS lock NMEA","context#Context":"This is a side quest while trying to build my own Kraken SDR using 5x RTL-SDR. I was reading about how to achieve phase coherence, stumbled on PPS synchronization and figured it’d be simple to implement. Not so much at first, because I was using a UART GPS module with the TTL dongle. Then I saw my small GPS module for the Joseph Hewitt’s Wardriver Board uses TTL and PPS pinouts, so a few minutes later and here we are!","gpsd-configuration#GPSD Configuration":"Edit the file /etc/default/gpsd:\nAdd the device path to the serial converter dongle:\nDEVICES=\"/dev/ttyUSB0\"\rAdd the following options to use readonly mode, and start polling right away:\nGPSD_OPTIONS=\"-b -n\"","implementation#Implementation":"The host is synchronized to GPS time via a USB GPS/GNSS receiver sending NMEA and PPS signals. The NMEA sentences are received via SHM (shared memory) from gpsd, and the PPS signal is used as the primary synchronization reference through Chrony. The system operates as a stratum 1 NTP source, which is the highest precision level that a computer can realistically achieve.","pps-tools#PPS Tools":"Kali Linux has ppscheck installed by default, and can be used to test if the /dev/pps0 device is working properly:\nppscheck /dev/pps0\nAlternatively, you can install additional PPS tools helpful with debugging PPS using sudo apt install pps-tools:\nppstest /dev/pps0"},"title":"Sub-microsecond Time Synchronization Using PPS"},"/guides/kali-linux/alfa-awus036ach/":{"data":{"":"","driver-installation#Driver Installation":"\rNote\nI prefer to use the morrownr’s driver since it’s a community-driven project.\nInstall the DKMS and Kernel headers package:\nsudo apt-get install dkms linux-headers-$(uname -r) bc Clone the repository:\ngit clone https://github.com/morrownr/8812au-20210820.git Change to the cloned directory:\ncd 8812au-20210820 Install the driver:\nsudo make dkms_install Run the installation script as a superuser - follow the instructions:\nsudo ./install-driver.sh ","references#References":" Alfa’s RTL8812AU Support Page morrownr’s Driver aircrack-ng’s Driver "},"title":"Alfa AWUS036ACH"},"/guides/kali-linux/gps-configuration/":{"data":{"":"","required-packages#Required Packages":"\rNote\ngpsd-tools provides cgps which I use for status monitoring and troubleshooting.\nInstall required packages:\nsudo apt install gpsd gpsd-tools Enable the gpsd service:\nsudo systemctl enable gpsd Start the gpsd service:\nsudo systemctl start gpsd Check GPS device is working using cgps - if multiple devices, specify the device path:\ncgps or cgps /dev/ttyACM# If it doesn’t work, check for device-specific instructions below. ","usb-dongles#USB Dongles":"BU-353N\rGlobalSat BU-353N Product Page lsusb = 067b:23a3 Prolific Technology, Inc. ATEN Serial Bridge ls /dev = /dev/ttyUSB# LED OFF: Receiver switch off LED ON: No fixed, Signal searching LED Flashing: Position Fixed\rEdit the gpsd configuration file:\nsudo nano /etc/default/gpsd Add the device path to the devices:\nDEVICES=\"/dev/ttyUSB#\" Add the following gpsd options:\nGPSD_OPTIONS=\"-b -n\" Note\nThese mandatory switches were identified by the wardriving community for the BU-353N to work properly. They enable read-only mode, and tell gpsd not to wait for a client before polling the GPS device.\nBU-353S4\rGlobalSat BU-353S4 EOL Notice lsusb = 067b:2303 Prolific Technology, Inc. PL2303 Serial Port ls /dev = /dev/ttyUSB# LED OFF: Receiver switch off LED ON: No fixed, Signal searching LED Flashing: Position Fixed\rEdit the gpsd configuration file:\nsudo nano /etc/default/gpsd Add the device path to the devices:\nDEVICES=\"/dev/ttyUSB#\" uBlox 7\rlsusb = 1546:01a7 U-Blox AG [u-blox 7] ls /dev = /dev/ttyACM# gpsd udev rules creates /dev/gps# Edit the gpsd configuration file:\nsudo nano /etc/default/gpsd Add the device path to the devices:\nDEVICES=\"/dev/ttyACM#\" "},"title":"GPS Configuration"},"/guides/kali-linux/initial-setup/":{"data":{"":"","common-steps#Common Steps":" Download the Kali Linux installer from the official Kali website. Use Balena Etcher to create a bootable USB install drive. Plug the USB drive into the system and boot from it. This step may need BIOS changes. (e.g. secure boot disabling, legacy mode activation) Complete the installation as desired. Login using the user account. Open a Terminal Emulator. Note the IP address:\nifconfig Enable the SSH server service:\nsudo systemctl enable ssh Perform a full system update - this will take a while:\nsudo apt update \u0026\u0026 sudo apt full-upgrade Reboot the system:\nsudo reboot ","headless-installation-rpi#Headless Installation (RPi)":"For a headless installation, and to have the system connect to a WiFi network automatically, add a wpa_supplicant.conf file to the first partition of the USB drive.\nGenerate the file using the following command on a different Linux system:\nwpa_passphrase YOURNETWORK \u003e wpa_supplicant.conf\nCaution\nYour user’s shell history will now contain your WiFi network password, edit your shell’s history file to remove it. (e.g. ~/.zsh_history, ~/.bash_history)","ssh#SSH":"Password Authentication\rCaution\nThis is not a recommended method of authentication, especially if your system is connected to the Internet. You should use SSH keys.\nEdit the configuration file as a superuser:\nsudo nano /etc/ssh/sshd_config Uncomment the line:\nPasswordAuthentication yes Restart the SSH server:\nsudo systemctl restart ssh You may now logout, and remote into the system. For Windows, I recommend MobaXterm or PuTTY. Key-based Authentication\rTo be confirmed."},"title":"Initial Setup"},"/guides/mqtt/kismet-mqtt/":{"data":{"":"Kismet currently supports MQTT ingest from RTL433. I was hoping to use Kismet’s MQTT datasource to ingest WiFi and Bluetooth scans from the Network Survey App. Unfortunately, the MQTT datasource is currently specific to the RTL433 MQTT format.\nInitially, I thought I’d have to create a translator from the App’s format to Kismet’s format, then I remembered of Node-RED. Since I’m running a Home Assistant server now, I added the Node-RED community add-on and created the following flow for each scan type to do the translation:\nMQTT IN -\u003e FUNCTION -\u003e MQTT OUT","functions#Functions":"WiFi\rlet timestamp = Date.parse(msg.payload.data.deviceTime); let capabilities = []; if (msg.payload.data.encryptionType != \"\") capabilities.push(`[${msg.payload.data.encryptionType}]`); if (msg.payload.data.wps == true) capabilities.push(\"[WPS]\"); msg.payload = { identity: msg.payload.data.deviceName, timestamp: Math.round(timestamp / 1000), ssid: msg.payload.data.ssid, bssid: msg.payload.data.bssid, capabilities: capabilities.join(\"\"), channel: msg.payload.data.channel.toString(), freqkhz: msg.payload.data.frequencyMhz, signal: msg.payload.data.signalStrength, lat: msg.payload.data.latitude, lon: msg.payload.data.longitude, alt: msg.payload.data.altitude, spd: msg.payload.data.speed }; return msg;\rBluetooth\rlet timestamp = Date.parse(msg.payload.data.deviceTime); let devicetype = \"BT\"; switch (msg.payload.data.supportedTechnologies) { case \"LE\": devicetype = \"BTLE\"; case \"BR_EDR\": devicetype = \"BR/EDR\"; case \"DUAL\": devicetype = \"BTLE\"; } msg.payload = { identity: msg.payload.data.deviceName, timestamp: Math.round(timestamp / 1000), btaddr: msg.payload.data.sourceAddress, name: msg.payload.data.otaDeviceName, devicetype: devicetype, signal: msg.payload.data.signalStrength, lat: msg.payload.data.latitude, lon: msg.payload.data.longitude, alt: msg.payload.data.altitude, spd: msg.payload.data.speed }; return msg;","mqtt-in-topics#MQTT IN Topics":"WiFi: 80211_beacon_message\nBluetooth: bluetooth_message","mqtt-out-topics#MQTT OUT Topics":"WiFi: DOT11SCAN\nBluetooth: BLUETOOTHSCAN"},"title":"Kismet MQTT"},"/tips/compiling-kismet-on-kali/":{"data":{"":"","additional-options#Additional Options":" For full debug logs, add the libdw-dev package. Switch Required Package –enable-bladerf libbladerf-dev –enable-wifi-coconut none –enable-btgeiger –enable-python-tools none ","datasource-specific#Datasource-specific":" rtl-433 package is already installed on a default Kali installation. libubertooth-dev package is required for Ubertooth support. ","default-configuration#Default Configuration":" To use the default ./configure command, these are the required packages: sudo apt install libpcre2-dev libsqlite3-dev libssl-dev pkgconf libwebsockets-dev libpcap-dev libnm-dev libnl-3-dev libnl-genl-3-dev libusb-1.0-0-dev libbtbb-dev librtlsdr-dev libmosquitto-dev libsensors-dev "},"title":"Compiling Kismet on Kali 2024.4"},"/tips/enabling-wlan-monitor-mode/":{"data":{"":"Not much else to say, for some reason my brain hasn’t saved these commands.\nsudo ip link set wlan# down sudo iw dev wlan# set type monitor sudo ip link set wlan# up"},"title":"Enabling WLAN Monitor Mode"},"/tips/prevent-networkmanager-conflicts/":{"data":{"":"Different methods to exclude interfaces from NetworkManager’s control:\nCreate the file: /etc/NetworkManager/conf.d/99-unmanaged-devices.conf Add the required text based on the list below. Reload the NetworkManager service: systemctl reload NetworkManager ","exclude-by-device-type-wifi-ethernet-etc#Exclude by Device Type (wifi, ethernet, etc.)":"\r[keyfile] Unmanaged-devices=type:wifi","exclude-by-interface#Exclude by Interface":"\r[keyfile] unmanaged-devices=interface-name:enp1s0","exclude-by-mac-address#Exclude by MAC address":"\r[keyfile] unmanaged-devices=mac:52:54:00:74:79:56","exclude-multiple-devices#Exclude multiple devices":"\r[keyfile] unmanaged-devices=interface-name:enp1s0;interface-name:enp7s0\rRef: Red Hat Documentation"},"title":"Prevent NetworkManager Conflicts"},"/tips/vs-xaml-unpackaged-comexception-classnotreg/":{"data":{"":"Building an unpackaged blank WinUI 3 project, the following exception is thrown:\nSystem.Runtime.InteropServices.COMException: ‘Class not registered (0x80040154 (REGDB_E_CLASSNOTREG))’\nTo fix this, add the following in the in the project’s .csproj:\n\u003cPropertyGroup\u003e ... \u003cWindowsPackageType\u003eNone\u003c/WindowsPackageType\u003e ... \u003c/PropertyGroup\u003e"},"title":"Visual Studio XAML COMException CLASSNOTREG"}}